import pymongo 
import sys
import time

#Connect to the local  Server
connection = pymongo.MongoClient()

delta = 0.1

def getTemp( temp):
   
    print "Da inserire temperatura : "+str(temp); 
    #Connect to the Acquarium DataBase Collection "Sensors"
    db = connection.acquarium.sensors

    #Get the latest temp recorder
    result = db.find().limit(1).sort("Data Ultimo Aggiornamento",pymongo.DESCENDING)
    try: 
        temp_read = float( result[0]['temp'])
    except :
        print("Lettura precedente non presente, inizzializzo a zero"+result[0]['temp']);
        temp_read=0.0
    
    print "Ultima temperatura letta :"+str(result[0]['temp']);
    if (abs(float(temp) - temp_read) > float(delta)):
        print "Temperatura variata, aggiungo nuova lettura! "+str(temp)+" : "+str(temp_read)
        acq_temp = {
            "temp":float(temp),
            "Sensor":"Acquario",
            "Data Primo Inserimento":time.strftime("%d/%m/%G")+" "+time.strftime("%X"),
            "Data Ultimo Aggiornamento":time.strftime("%d/%m/%G")+" "+time.strftime("%X")
        };
        db.insert(acq_temp);
    else:
#        print "Temperatura non variata, aggiorno solo data ultima lettura "+str(result[0]['_id']
        db.update({
          "_id" : result[0]['_id'],
        },{
          '$set' : {
            "Data Ultimo Aggiornamento":time.strftime("%d/%m/%G")+" "+time.strftime("%X")
          }
        },upsert=False) 

    connection.close()

def logEvent(level, module, action, message):

    #Connect to acquarium DataBase Events Collection
    db = connection.acquarium.events

    event = {
        "date" : time.strftime("%d/%m/%G")+" "+time.strftime("%X"),
        "level" : level,
        "module" : module,
        "action" : action,
        "message" : message
    }
    db.insert(event)

    connection.close()


if __name__ == "__main__":
    #getTemp(sys.argv[1])
    logEvent(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])
    
